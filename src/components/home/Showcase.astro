---
interface Props {
  image: ImageMetadata;
  title: string;
  description: string[];
  reverse?: boolean;
}
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";

const { image, title, description, reverse } = Astro.props;
---

<div
  class={`flex lg:justify-center lg:items-center px-5 space-y-5 lg:px-20 flex-col lg:flex-row md:flex-row ${reverse ? "lg:flex-row-reverse" : ""}`}
>
  <div
    class="md:flex-1/2 lg:flex-1/2 md:items-center md:justify-center lg:items-center lg:justify-center"
  >
    <Image
      src={image}
      alt="Mission Image"
      class="h-52 w-[100%] lg:h-1/4"
      id=`${reverse ? "showcase-image-right" : "showcase-image-left"}`
    />
  </div>
  <div
    class="flex flex-1/2 flex-col space-y-4 justify-center items-center text-center"
    id="showcase-text"
  >
    <h3 class="text-3xl font-extrabold uppercase">{title}</h3>
    <div class="flex flex-col space-y-1">
      {description.map((line) => <p>{line}</p>)}
    </div>
  </div>
</div>

<script>
  import { animate, utils, onScroll } from "animejs";

  const [container] = utils.$("#scroll-container");

  

  animate("#showcase-image-right", {
    translateX: {
      from: "50px",
      to: 0,
    },
    alternate: true,
    repeat: true,
    // loop: true,
    duration: 500,
    autoplay: onScroll({
      container,
      
      enter: "bottom top",
      // Leaves when the top of the container meets the bottom of the target
      leave: "top bottom",
    }),
  });
  animate("#showcase-image-left", {
    translateX: {
      from: "-50px",
      to: 0,
    },
    alternate: true,
    repeat: true,
    // loop: true,
    duration: 500,
    autoplay: onScroll({
      container,
      
      enter: "bottom top",
      // Leaves when the top of the container meets the bottom of the target
      leave: "top bottom",
    }),
  });

  animate("#showcase-text", {
    scale: {
      from: 0.3,
      to: 1,
    },
    alternate: true,
    repeat: true,
    duration: 500,
    autoplay: onScroll({ container, enter: 'bottom top',
  // Leaves when the top of the container meets the bottom of the target
  leave: 'top bottom', }),
  });
</script>
